generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts            Post[]
  scheduledPosts   ScheduledPost[]
  socialAccounts   SocialAccount[]
  analytics        Analytics[]

  @@map("users")
}

// Post Model
model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  status    String   @default("draft") // draft, published, scheduled
  platforms String[] // twitter, instagram, facebook, linkedin
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduledPost   ScheduledPost?
  analytics       Analytics[]

  @@index([userId])
  @@map("posts")
}

// Scheduled Posts
model ScheduledPost {
  id          String   @id @default(cuid())
  postId      String   @unique
  scheduledAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, scheduledAt])
  @@map("scheduled_posts")
}

// Social Accounts (Connected OAuth)
model SocialAccount {
  id                String   @id @default(cuid())
  platform          String   // twitter, instagram, facebook, linkedin
  accountId         String
  accountName       String
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime?
  profileImageUrl   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String

  user Analytics[] @relation("SocialAccountAnalytics")
  owner User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([platform, accountId])
  @@index([userId])
  @@map("social_accounts")
}

// Analytics
model Analytics {
  id              String   @id @default(cuid())
  postId          String
  socialAccountId String
  likes           Int      @default(0)
  shares          Int      @default(0)
  comments        Int      @default(0)
  impressions     Int      @default(0)
  clicks          Int      @default(0)
  engagementRate  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String

  post           Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  socialAccount  SocialAccount @relation("SocialAccountAnalytics", fields: [socialAccountId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, socialAccountId])
  @@index([userId])
  @@map("analytics")
}
